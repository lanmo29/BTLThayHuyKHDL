import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import joblib
import plotly.graph_objects as go
import plotly.express as px
from preprocessing import load_data, preprocess_data, get_important_features
from model import train_model, save_model, load_model, predict_price, plot_feature_importance
from utils import (
    plot_price_distribution, plot_price_vs_feature,
    plot_correlation_matrix, plot_prediction_vs_actual,
    get_neighborhood_stats, plot_neighborhood_prices,
    format_price
)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="D·ª± b√°o Gi√° Nh√†",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown('''
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: bold;
    }

    .sub-header {
        font-size: 1.8rem;
        color: #0D47A1;
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-weight: bold;
    }

    .prediction-box {
        background-color: #E3F2FD;
        padding: 2rem;
        border-radius: 10px;
        margin-top: 1rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .prediction-value {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1E88E5;
    }

    .feature-section {
        background-color: #F5F5F5;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }

    .info-box {
        background-color: #E8F5E9;
        padding: 1rem;
        border-radius: 5px;
        margin-bottom: 1rem;
    }

    .stButton>button {
        width: 100%;
        background-color: #1E88E5;
        color: white;
    }
</style>
''', unsafe_allow_html=True)

def main():
    # Ti√™u ƒë·ªÅ ch√≠nh
    st.markdown('<p class="main-header">üè† ·ª®NG D·ª§NG D·ª∞ B√ÅO GI√Å NH√Ä</p>', unsafe_allow_html=True)

    # Sidebar
    st.sidebar.image("https://img.icons8.com/color/96/000000/cottage.png", width=80)
    st.sidebar.title("ƒêi·ªÅu h∆∞·ªõng")

    # Menu ƒëi·ªÅu h∆∞·ªõng
    page = st.sidebar.radio(
        "Ch·ªçn trang:",
        ["D·ª± b√°o gi√°", "Ph√¢n t√≠ch d·ªØ li·ªáu", "Th√¥ng tin m√¥ h√¨nh"]
    )

    # ƒê∆∞·ªùng d·∫´n d·ªØ li·ªáu
    train_path = "data/train.csv"
    test_path = "data/test.csv"
    model_path = "models/saved_model.pkl"

    # T·∫£i d·ªØ li·ªáu
    @st.cache_data
    def get_data():
        train_df = load_data(train_path)
        return train_df

    train_df = get_data()

    # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ l·∫•y numerical_cols v√† categorical_cols
    X, y, preprocessor, numerical_cols, categorical_cols = preprocess_data(train_df)

    # Ki·ªÉm tra v√† t·∫°o m√¥ h√¨nh
    if not os.path.exists(model_path) or (os.path.exists(model_path) and os.path.getsize(model_path) == 0):
        with st.spinner('ƒêang hu·∫•n luy·ªán m√¥ h√¨nh... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...'):
            os.makedirs('models', exist_ok=True)
            model_results = train_model(X, y, preprocessor, model_type='random_forest')
            model = model_results['model']
            save_model(model, preprocessor, model_path)
    else:
        model, preprocessor = load_model(model_path)

    # Ph·∫ßn D·ª± b√°o gi√°
    if page == "D·ª± b√°o gi√°":
        st.markdown('<p class="sub-header">Nh·∫≠p th√¥ng tin ng√¥i nh√†</p>', unsafe_allow_html=True)

        # T·∫°o layout 3 c·ªôt cho form nh·∫≠p li·ªáu
        col1, col2, col3 = st.columns(3)

        # Th√¥ng tin c∆° b·∫£n - C·ªôt 1
        with col1:
            st.markdown('<div class="feature-section">', unsafe_allow_html=True)
            st.subheader("Th√¥ng tin c∆° b·∫£n")

            neighborhoods = sorted(train_df['Neighborhood'].unique().tolist())
            neighborhood = st.selectbox("Khu v·ª±c", neighborhoods,
                                        index=neighborhoods.index('NAmes') if 'NAmes' in neighborhoods else 0)

            mszoning_values = train_df['MSZoning'].unique().tolist()
            mszoning = st.selectbox("Ph√¢n v√πng", mszoning_values,
                                    index=mszoning_values.index('RL') if 'RL' in mszoning_values else 0)

            year_built = st.slider("NƒÉm x√¢y d·ª±ng", int(train_df['YearBuilt'].min()), 2025, 2000)
            year_remod = st.slider("NƒÉm c·∫£i t·∫°o", int(train_df['YearRemodAdd'].min()), 2025, 2000)

            overall_qual = st.slider("Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ (1-10)", 1, 10, 7)
            overall_cond = st.slider("ƒêi·ªÅu ki·ªán t·ªïng th·ªÉ (1-10)", 1, 10, 5)
            st.markdown('</div>', unsafe_allow_html=True)

        # Th√¥ng s·ªë di·ªán t√≠ch - C·ªôt 2
        with col2:
            st.markdown('<div class="feature-section">', unsafe_allow_html=True)
            st.subheader("Th√¥ng s·ªë di·ªán t√≠ch")

            lot_area = st.number_input("Di·ªán t√≠ch l√¥ ƒë·∫•t (sq.ft)", min_value=1000, max_value=100000, value=8500)
            total_bsmt_sf = st.number_input("Di·ªán t√≠ch t·∫ßng h·∫ßm (sq.ft)", min_value=0, max_value=6000, value=1000)
            gr_liv_area = st.number_input("Di·ªán t√≠ch sinh ho·∫°t (sq.ft)", min_value=500, max_value=6000, value=1500)
            first_flr_sf = st.number_input("Di·ªán t√≠ch t·∫ßng 1 (sq.ft)", min_value=500, max_value=4000, value=1000)
            second_flr_sf = st.number_input("Di·ªán t√≠ch t·∫ßng 2 (sq.ft)", min_value=0, max_value=4000, value=500)
            wood_deck_sf = st.number_input("Di·ªán t√≠ch s√†n g·ªó (sq.ft)", min_value=0, max_value=1000, value=100)
            st.markdown('</div>', unsafe_allow_html=True)

        # C√°c ti·ªán √≠ch - C·ªôt 3
        with col3:
            st.markdown('<div class="feature-section">', unsafe_allow_html=True)
            st.subheader("C√°c ti·ªán √≠ch")

            bedrooms = st.slider("S·ªë ph√≤ng ng·ªß", 0, 10, 3)
            bathrooms = st.slider("S·ªë ph√≤ng t·∫Øm ƒë·∫ßy ƒë·ªß", 0, 5, 2)
            half_bath = st.slider("S·ªë ph√≤ng t·∫Øm n·ª≠a", 0, 3, 0)
            kitchen_qual_values = train_df['KitchenQual'].unique().tolist()
            kitchen_qual = st.selectbox("Ch·∫•t l∆∞·ª£ng nh√† b·∫øp", kitchen_qual_values,
                                        index=kitchen_qual_values.index('Gd') if 'Gd' in kitchen_qual_values else 0)

            garage_type_values = list(train_df['GarageType'].unique())
            if None in garage_type_values:
                garage_type_values.remove(None)
            garage_type = st.selectbox("Lo·∫°i garage", garage_type_values, index=garage_type_values.index(
                'Attchd') if 'Attchd' in garage_type_values else 0)

            garage_cars = st.slider("S·ª©c ch·ª©a xe trong garage", 0, 5, 2)
            garage_area = st.number_input("Di·ªán t√≠ch garage (sq.ft)", min_value=0, max_value=1500, value=500)
            st.markdown('</div>', unsafe_allow_html=True)

        # N√∫t d·ª± ƒëo√°n
        predict_btn = st.button("D·ª∞ ƒêO√ÅN GI√Å NH√Ä", key="predict_btn")

        if predict_btn:
            # T·∫°o dictionary c√°c ƒë·∫∑c tr∆∞ng
            features = {
                'Neighborhood': neighborhood,
                'MSZoning': mszoning,
                'YearBuilt': year_built,
                'YearRemodAdd': year_remod,
                'OverallQual': overall_qual,
                'OverallCond': overall_cond,
                'LotArea': lot_area,
                'TotalBsmtSF': total_bsmt_sf,
                'GrLivArea': gr_liv_area,
                '1stFlrSF': first_flr_sf,
                '2ndFlrSF': second_flr_sf,
                'WoodDeckSF': wood_deck_sf,
                'BedroomAbvGr': bedrooms,
                'FullBath': bathrooms,
                'HalfBath': half_bath,
                'KitchenQual': kitchen_qual,
                'GarageType': garage_type,
                'GarageCars': garage_cars,
                'GarageArea': garage_area,
                'TotRmsAbvGrd': bedrooms + 3,
                'Fireplaces': 1,
                'BsmtFullBath': 1,
                'OpenPorchSF': 50,
                'MasVnrArea': 100,
                'Exterior1st': 'VinylSd',
                'Exterior2nd': 'VinylSd',
                'BsmtFinSF1': 500,
                'SaleType': 'WD',
                'MasVnrType': 'BrkFace',
                'BsmtQual': 'TA',
                'BsmtCond': 'TA',
                'BsmtExposure': 'No',
                'BsmtFinType1': 'GLQ',
                'HeatingQC': 'Ex',
                'CentralAir': 'Y',
                'Electrical': 'SBrkr',
                'Functional': 'Typ',
                'FireplaceQu': 'Gd',
                'GarageFinish': 'Fin',
                'GarageQual': 'TA',
                'GarageCond': 'TA',
                'PavedDrive': 'Y',
                'SaleCondition': 'Normal',
                'BsmtUnfSF': 500,
                'BsmtFinSF2': 0,
                'LowQualFinSF': 0,
                'EnclosedPorch': 0,
                '3SsnPorch': 0,
                'ScreenPorch': 0,
                'PoolArea': 0,
                'MiscVal': 0,
                'MoSold': 6,
                'YrSold': 2025,
                'Alley': 'None',
                'PoolQC': 'None',
                'Fence': 'None',
                'MiscFeature': 'None'
            }

            # Chuy·ªÉn features th√†nh DataFrame
            features_df = pd.DataFrame([features])

            # Ki·ªÉm tra v√† th√™m c√°c c·ªôt thi·∫øu
            for col in numerical_cols:
                if col not in features_df.columns:
                    features_df[col] = 0
            for col in categorical_cols:
                if col not in features_df.columns:
                    features_df[col] = 'None'

            # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt kh·ªõp v·ªõi d·ªØ li·ªáu hu·∫•n luy·ªán
            try:
                features_df = features_df.reindex(columns=X.columns, fill_value=0)
                st.write(f"Shape of features_df after reindex: {features_df.shape}")
            except ValueError as e:
                st.error(f"L·ªói khi t√°i l·∫≠p ch·ªâ s·ªë c·ªôt: {str(e)}")
                return

            # Th·ª±c hi·ªán d·ª± ƒëo√°n
            try:
                # Transform features
                X_processed = preprocessor.transform(features_df)
                st.write(f"Shape of X_processed before prediction: {X_processed.shape}")
                # Ensure X_processed is 2D
                if len(X_processed.shape) > 2:
                    X_processed = X_processed.reshape(X_processed.shape[0], -1)
                    st.write(f"Shape of X_processed after reshape: {X_processed.shape}")
                # Make prediction directly
                price_prediction = model.predict(X_processed)[0]
            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
                return

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
            st.markdown('<div class="prediction-box">', unsafe_allow_html=True)
            st.markdown('<p>Gi√° d·ª± ƒëo√°n c·ªßa ng√¥i nh√† l√†:</p>', unsafe_allow_html=True)
            st.markdown(f'<p class="prediction-value">{format_price(price_prediction)}</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)

            # Hi·ªÉn th·ªã th√¥ng tin so s√°nh
            st.markdown('<p class="sub-header">So s√°nh v·ªõi th·ªã tr∆∞·ªùng</p>', unsafe_allow_html=True)

            col1, col2 = st.columns(2)

            with col1:
                # T√¨m gi√° trung b√¨nh khu v·ª±c
                neighborhood_data = train_df[train_df['Neighborhood'] == neighborhood]
                avg_price_neighborhood = neighborhood_data['SalePrice'].mean()

                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown(f"**Gi√° trung b√¨nh khu v·ª±c {neighborhood}:** {format_price(avg_price_neighborhood)}")
                diff_pct = (price_prediction - avg_price_neighborhood) / avg_price_neighborhood * 100
                st.markdown(
                    f"**So v·ªõi gi√° trung b√¨nh khu v·ª±c:** {'tƒÉng' if diff_pct > 0 else 'gi·∫£m'} {abs(diff_pct):.2f}%")
                st.markdown('</div>', unsafe_allow_html=True)

            with col2:
                # T√¨m gi√° trung b√¨nh to√†n th√†nh ph·ªë
                avg_price_all = train_df['SalePrice'].mean()

                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown(f"**Gi√° trung b√¨nh to√†n th√†nh ph·ªë:** {format_price(avg_price_all)}")
                diff_pct_all = (price_prediction - avg_price_all) / avg_price_all * 100
                st.markdown(
                    f"**So v·ªõi gi√° trung b√¨nh to√†n th√†nh ph·ªë:** {'tƒÉng' if diff_pct_all > 0 else 'gi·∫£m'} {abs(diff_pct_all):.2f}%")
                st.markdown('</div>', unsafe_allow_html=True)

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° tr√™n khu v·ª±c
            st.subheader(f"Ph√¢n ph·ªëi gi√° nh√† ·ªü khu v·ª±c {neighborhood}")
            fig = plot_price_vs_feature(train_df, 'Neighborhood', title=f"Gi√° nh√† theo khu v·ª±c (ƒëi·ªÉm ƒë·ªè l√† d·ª± ƒëo√°n)")

            # Th√™m ƒëi·ªÉm d·ª± ƒëo√°n v√†o bi·ªÉu ƒë·ªì
            fig.add_trace(
                go.Scatter(
                    x=[neighborhood],
                    y=[price_prediction],
                    mode='markers',
                    marker=dict(color='red', size=12, symbol='star'),
                    name='D·ª± ƒëo√°n c·ªßa b·∫°n'
                )
            )

            st.plotly_chart(fig, use_container_width=True)

    # Ph·∫ßn Ph√¢n t√≠ch d·ªØ li·ªáu
    elif page == "Ph√¢n t√≠ch d·ªØ li·ªáu":
        st.markdown('<p class="sub-header">Ph√¢n t√≠ch d·ªØ li·ªáu gi√° nh√†</p>', unsafe_allow_html=True)

        # T·∫°o tabs
        tab1, tab2, tab3 = st.tabs(["Ph√¢n ph·ªëi gi√°", "Ph√¢n t√≠ch theo khu v·ª±c", "T∆∞∆°ng quan"])

        with tab1:
            st.subheader("Ph√¢n ph·ªëi gi√° nh√†")
            price_dist_fig = plot_price_distribution(train_df)
            st.plotly_chart(price_dist_fig, use_container_width=True)

            st.subheader("Ph√¢n ph·ªëi gi√° theo di·ªán t√≠ch")
            area_price_fig = plot_price_vs_feature(train_df, 'GrLivArea', title="Gi√° nh√† theo di·ªán t√≠ch sinh ho·∫°t")
            st.plotly_chart(area_price_fig, use_container_width=True)

            st.subheader("Ph√¢n ph·ªëi gi√° theo ch·∫•t l∆∞·ª£ng")
            qual_price_fig = plot_price_vs_feature(train_df, 'OverallQual', title="Gi√° nh√† theo ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ")
            st.plotly_chart(qual_price_fig, use_container_width=True)

        with tab2:
            st.subheader("Ph√¢n t√≠ch gi√° nh√† theo khu v·ª±c")
            neighborhood_fig = plot_neighborhood_prices(train_df)
            st.plotly_chart(neighborhood_fig, use_container_width=True)

            st.subheader("Th·ªëng k√™ chi ti·∫øt theo khu v·ª±c")
            neighborhood_stats = get_neighborhood_stats(train_df)

            # ƒê·ªãnh d·∫°ng gi√° tr·ªã ƒë·ªÉ hi·ªÉn th·ªã
            formatted_stats = neighborhood_stats.copy()
            formatted_stats['mean'] = formatted_stats['mean'].apply(lambda x: f"${x:,.2f}")
            formatted_stats['median'] = formatted_stats['median'].apply(lambda x: f"${x:,.2f}")
            formatted_stats['std'] = formatted_stats['std'].apply(lambda x: f"${x:,.2f}")

            # ƒê·ªïi t√™n c·ªôt
            formatted_stats.columns = ['Gi√° trung b√¨nh', 'Gi√° trung v·ªã', 'ƒê·ªô l·ªách chu·∫©n', 'S·ªë l∆∞·ª£ng']

            st.dataframe(formatted_stats, use_container_width=True)

            # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° theo khu v·ª±c
            st.subheader("Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° theo khu v·ª±c")
            selected_neighborhood = st.selectbox(
                "Ch·ªçn khu v·ª±c ƒë·ªÉ xem ph√¢n ph·ªëi gi√°",
                sorted(train_df['Neighborhood'].unique().tolist())
            )

            if selected_neighborhood:
                # L·ªçc d·ªØ li·ªáu cho khu v·ª±c ƒë∆∞·ª£c ch·ªçn
                neighborhood_data = train_df[train_df['Neighborhood'] == selected_neighborhood]

                fig = px.histogram(
                    neighborhood_data, x='SalePrice', nbins=30,
                    title=f'Ph√¢n ph·ªëi gi√° nh√† ·ªü khu v·ª±c {selected_neighborhood}',
                    labels={'SalePrice': 'Gi√° nh√† ($)', 'count': 'S·ªë l∆∞·ª£ng'}
                )
                fig.update_layout(
                    xaxis_title='Gi√° nh√† ($)',
                    yaxis_title='S·ªë l∆∞·ª£ng',
                    template='plotly_white'
                )

                # Th√™m gi√° trung b√¨nh v√† trung v·ªã
                avg_price = neighborhood_data['SalePrice'].mean()
                median_price = neighborhood_data['SalePrice'].median()

                fig.add_vline(x=avg_price, line_dash="dash", line_color="red",
                              annotation_text=f"Trung b√¨nh: ${avg_price:,.2f}",
                              annotation_position="top right")

                fig.add_vline(x=median_price, line_dash="dash", line_color="green",
                              annotation_text=f"Trung v·ªã: ${median_price:,.2f}",
                              annotation_position="top left")

                st.plotly_chart(fig, use_container_width=True)

        with tab3:
            st.subheader("T∆∞∆°ng quan gi·ªØa c√°c ƒë·∫∑c tr∆∞ng")

            # Ch·ªçn c√°c ƒë·∫∑c tr∆∞ng quan tr·ªçng cho ma tr·∫≠n t∆∞∆°ng quan
            important_features = [
                'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF',
                'FullBath', 'YearBuilt', 'YearRemodAdd', '1stFlrSF'
            ]

            corr_fig = plot_correlation_matrix(train_df, important_features)
            st.plotly_chart(corr_fig, use_container_width=True)

            # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ ph√¢n t√≠ch
            st.subheader("Ph√¢n t√≠ch t∆∞∆°ng quan v·ªõi gi√°")

            numerical_cols = train_df.select_dtypes(include=['int64', 'float64']).columns
            numerical_cols = [col for col in numerical_cols if col != 'Id' and col != 'SalePrice']

            selected_feature = st.selectbox(
                "Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ xem t∆∞∆°ng quan v·ªõi gi√°",
                numerical_cols
            )

            if selected_feature:
                feature_fig = plot_price_vs_feature(train_df, selected_feature)
                st.plotly_chart(feature_fig, use_container_width=True)

                # T√≠nh h·ªá s·ªë t∆∞∆°ng quan
                correlation = train_df[[selected_feature, 'SalePrice']].corr().iloc[0, 1]

                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown(f"**H·ªá s·ªë t∆∞∆°ng quan v·ªõi gi√°:** {correlation:.4f}")

                if abs(correlation) > 0.7:
                    st.markdown("üü¢ **M·ª©c ƒë·ªô t∆∞∆°ng quan:** R·∫•t m·∫°nh")
                elif abs(correlation) > 0.5:
                    st.markdown("üü° **M·ª©c ƒë·ªô t∆∞∆°ng quan:** M·∫°nh")
                elif abs(correlation) > 0.3:
                    st.markdown("üü† **M·ª©c ƒë·ªô t∆∞∆°ng quan:** Trung b√¨nh")
                else:
                    st.markdown("üî¥ **M·ª©c ƒë·ªô t∆∞∆°ng quan:** Y·∫øu")
                st.markdown('</div>', unsafe_allow_html=True)

    # Ph·∫ßn Th√¥ng tin m√¥ h√¨nh
    elif page == "Th√¥ng tin m√¥ h√¨nh":
        st.markdown('<p class="sub-header">Th√¥ng tin chi ti·∫øt v·ªÅ m√¥ h√¨nh</p>', unsafe_allow_html=True)

        # T·∫°o tabs
        tab1, tab2 = st.tabs(["ƒê√°nh gi√° m√¥ h√¨nh", "ƒê·∫∑c tr∆∞ng quan tr·ªçng"])

        # Load m√¥ h√¨nh v√† th·ª±c hi·ªán ƒë√°nh gi√°
        model, preprocessor = load_model(model_path)
        X, y, _, numerical_cols, categorical_cols = preprocess_data(train_df)
        X_processed = preprocessor.transform(X)
        predictions = model.predict(X_processed)

        with tab1:
            st.subheader("ƒê√°nh gi√° hi·ªáu nƒÉng m√¥ h√¨nh")

            # T√≠nh c√°c ch·ªâ s·ªë ƒë√°nh gi√°
            from sklearn.metrics import mean_squared_error, r2_score
            mse = mean_squared_error(y, predictions)
            rmse = np.sqrt(mse)
            r2 = r2_score(y, predictions)

            # Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh
            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown("### Root Mean Squared Error (RMSE)")
                st.markdown(f"#### ${rmse:,.2f}")
                st.markdown("*Sai s·ªë trung b√¨nh d·ª± ƒëo√°n*")
                st.markdown('</div>', unsafe_allow_html=True)

            with col2:
                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown("### R¬≤ Score")
                st.markdown(f"#### {r2:.4f}")
                st.markdown("*ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh (0-1)*")
                st.markdown('</div>', unsafe_allow_html=True)

            with col3:
                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown("### Lo·∫°i m√¥ h√¨nh")
                st.markdown("#### Random Forest")
                st.markdown("*Ensemble Learning Method*")
                st.markdown('</div>', unsafe_allow_html=True)

            # Bi·ªÉu ƒë·ªì so s√°nh gi√° d·ª± ƒëo√°n v√† th·ª±c t·∫ø
            st.subheader("So s√°nh gi√° d·ª± ƒëo√°n v√† th·ª±c t·∫ø")
            prediction_fig = plot_prediction_vs_actual(y, predictions)
            st.plotly_chart(prediction_fig, use_container_width=True)

            # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi sai s·ªë
            error = y - predictions

            fig = px.histogram(
                x=error, nbins=50,
                title='Ph√¢n ph·ªëi sai s·ªë d·ª± ƒëo√°n',
                labels={'x': 'Sai s·ªë ($)'}
            )
            fig.update_layout(
                xaxis_title='Sai s·ªë ($)',
                yaxis_title='S·ªë l∆∞·ª£ng',
                template='plotly_white'
            )

            # Th√™m ƒë∆∞·ªùng gi√° tr·ªã trung b√¨nh c·ªßa sai s·ªë
            fig.add_vline(x=error.mean(), line_dash="dash", line_color="red",
                          annotation_text=f"Sai s·ªë trung b√¨nh: ${error.mean():,.2f}",
                          annotation_position="top right")

            st.plotly_chart(fig, use_container_width=True)

        with tab2:
            st.subheader("T·∫ßm quan tr·ªçng c·ªßa c√°c ƒë·∫∑c tr∆∞ng")

            if hasattr(model, 'feature_importances_'):
                # Get feature names after preprocessing
                feature_names = []
                if hasattr(preprocessor, 'get_feature_names_out'):
                    feature_names = preprocessor.get_feature_names_out()
                else:
                    # Fallback for older scikit-learn versions
                    feature_names = [f"feature_{i}" for i in range(X_processed.shape[1])]

                # Create a DataFrame with feature importances
                importances = pd.DataFrame({
                    'feature': feature_names,
                    'importance': model.feature_importances_
                })
                importances = importances.sort_values('importance', ascending=False).head(20)

                # Create an interactive plot
                fig = px.bar(
                    importances, x='importance', y='feature',
                    orientation='h',
                    title='Top 20 ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t',
                    labels={'importance': 'M·ª©c ƒë·ªô quan tr·ªçng', 'feature': 'ƒê·∫∑c tr∆∞ng'}
                )
                fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    template='plotly_white'
                )

                st.plotly_chart(fig, use_container_width=True)

                # More detailed explanation
                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown("### Gi·∫£i th√≠ch m·ª©c ƒë·ªô quan tr·ªçng c·ªßa ƒë·∫∑c tr∆∞ng")
                st.markdown("""
                **M·ª©c ƒë·ªô quan tr·ªçng** c·ªßa m·ªôt ƒë·∫∑c tr∆∞ng trong m√¥ h√¨nh Random Forest th·ªÉ hi·ªán m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng c·ªßa ƒë·∫∑c tr∆∞ng ƒë√≥ ƒë·∫øn quy·∫øt ƒë·ªãnh c·ªßa m√¥ h√¨nh.

                C√°c ƒë·∫∑c tr∆∞ng c√≥ m·ª©c ƒë·ªô quan tr·ªçng cao nh·∫•t th∆∞·ªùng l√† nh·ªØng y·∫øu t·ªë ·∫£nh h∆∞·ªüng l·ªõn nh·∫•t ƒë·∫øn gi√° nh√†, nh∆∞:

                * **Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ** (OverallQual) - ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ c·ªßa ng√¥i nh√†
                * **Di·ªán t√≠ch sinh ho·∫°t** (GrLivArea) - T·ªïng di·ªán t√≠ch c√°c kh√¥ng gian sinh ho·∫°t
                * **Di·ªán t√≠ch t·∫ßng h·∫ßm** (TotalBsmtSF) - K√≠ch th∆∞·ªõc c·ªßa t·∫ßng h·∫ßm
                * **S·ªë ch·ªó ƒë·∫≠u xe trong garage** (GarageCars) - S·ª©c ch·ª©a c·ªßa garage
                * **V·ªã tr√≠ khu v·ª±c** (Neighborhood) - Khu v·ª±c n∆°i ng√¥i nh√† t·ªça l·∫°c
                """)
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.info("M√¥ h√¨nh n√†y kh√¥ng cung c·∫•p th√¥ng tin v·ªÅ t·∫ßm quan tr·ªçng c·ªßa c√°c ƒë·∫∑c tr∆∞ng.")

            # Gi·∫£i th√≠ch ·∫£nh h∆∞·ªüng c·ªßa c√°c ƒë·∫∑c tr∆∞ng quan tr·ªçng
            st.subheader("Ph√¢n t√≠ch chi ti·∫øt c√°c ƒë·∫∑c tr∆∞ng quan tr·ªçng")

            important_features = [
                'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF',
                'YearBuilt', 'Neighborhood'
            ]

            selected_feature = st.selectbox(
                "Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt",
                important_features
            )

            if selected_feature:
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì quan h·ªá v·ªõi gi√°
                feature_fig = plot_price_vs_feature(train_df, selected_feature)
                st.plotly_chart(feature_fig, use_container_width=True)

                # Gi·∫£i th√≠ch √Ω nghƒ©a c·ªßa ƒë·∫∑c tr∆∞ng
                explanations = {
                    'OverallQual': """
                        **Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ (OverallQual)** ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng v·∫≠t li·ªáu v√† ho√†n thi·ªán c·ªßa ng√¥i nh√† tr√™n thang ƒëi·ªÉm t·ª´ 1-10.

                        * Ng√¥i nh√† v·ªõi ƒëi·ªÉm ch·∫•t l∆∞·ª£ng cao (8-10) th∆∞·ªùng c√≥ gi√° cao h∆°n ƒë√°ng k·ªÉ
                        * M·ªói 1 ƒëi·ªÉm tƒÉng trong ch·∫•t l∆∞·ª£ng c√≥ th·ªÉ l√†m tƒÉng gi√° tr·ªã nh√† l√™n t·ªõi 20-30%
                        * ƒê√¢y l√† m·ªôt trong nh·ªØng y·∫øu t·ªë quan tr·ªçng nh·∫•t quy·∫øt ƒë·ªãnh gi√° nh√†
                    """,
                    'GrLivArea': """
                        **Di·ªán t√≠ch sinh ho·∫°t (GrLivArea)** l√† t·ªïng di·ªán t√≠ch c√°c kh√¥ng gian sinh ho·∫°t tr√™n m·∫∑t ƒë·∫•t c·ªßa ng√¥i nh√†.

                        * Di·ªán t√≠ch l·ªõn h∆°n th∆∞·ªùng ƒë·ªìng nghƒ©a v·ªõi gi√° cao h∆°n
                        * T∆∞∆°ng quan n√†y kh√° tuy·∫øn t√≠nh - m·ªói foot vu√¥ng th√™m v√†o l√†m tƒÉng gi√° tr·ªã nh√†
                        * Tuy nhi√™n c√≥ ng∆∞·ª°ng gi·ªõi h·∫°n - nh√† qu√° l·ªõn so v·ªõi khu v·ª±c xung quanh c√≥ th·ªÉ kh√¥ng tƒÉng gi√° tr·ªã t∆∞∆°ng ·ª©ng
                    """,
                    'GarageCars': """
                        **S·ª©c ch·ª©a garage (GarageCars)** l√† s·ªë l∆∞·ª£ng xe h∆°i c√≥ th·ªÉ ƒë·∫≠u trong garage.

                        * Garage cho 2-3 xe th∆∞·ªùng ƒë∆∞·ª£c ∆∞a chu·ªông nh·∫•t tr√™n th·ªã tr∆∞·ªùng
                        * Garage l·ªõn h∆°n (3+ xe) c√≥ th·ªÉ l√†m tƒÉng gi√° tr·ªã nh√†, nh∆∞ng t·ª∑ l·ªá tƒÉng s·∫Ω gi·∫£m d·∫ßn
                        * Nh√† kh√¥ng c√≥ garage th∆∞·ªùng c√≥ gi√° th·∫•p h∆°n ƒë√°ng k·ªÉ so v·ªõi nh√† c√≥ garage
                    """,
                    'TotalBsmtSF': """
                        **Di·ªán t√≠ch t·∫ßng h·∫ßm (TotalBsmtSF)** l√† t·ªïng di·ªán t√≠ch c·ªßa t·∫ßng h·∫ßm.

                        * T·∫ßng h·∫ßm ho√†n thi·ªán l√†m tƒÉng gi√° tr·ªã s·ª≠ d·ª•ng v√† gi√° b√°n c·ªßa ng√¥i nh√†
                        * T·∫ßng h·∫ßm c√≥ th·ªÉ tƒÉng di·ªán t√≠ch sinh ho·∫°t m√† kh√¥ng c·∫ßn m·ªü r·ªông di·ªán t√≠ch x√¢y d·ª±ng
                        * Ch·∫•t l∆∞·ª£ng v√† m·ª©c ƒë·ªô ho√†n thi·ªán c·ªßa t·∫ßng h·∫ßm ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn gi√° tr·ªã gia tƒÉng
                    """,
                    'YearBuilt': """
                        **NƒÉm x√¢y d·ª±ng (YearBuilt)** cho bi·∫øt tu·ªïi c·ªßa ng√¥i nh√†.

                        * Nh√† m·ªõi h∆°n th∆∞·ªùng c√≥ gi√° cao h∆°n do √°p d·ª•ng c√¥ng ngh·ªá v√† v·∫≠t li·ªáu m·ªõi
                        * Nh√† c≈© c√≥ th·ªÉ c√≥ gi√° tr·ªã v·ªÅ ki·∫øn tr√∫c nh∆∞ng th∆∞·ªùng c·∫ßn chi ph√≠ b·∫£o tr√¨ cao h∆°n
                        * C√°c nh√† x√¢y trong m·ªôt s·ªë giai ƒëo·∫°n nh·∫•t ƒë·ªãnh c√≥ th·ªÉ c√≥ gi√° tr·ªã l·ªãch s·ª≠ ho·∫∑c ki·∫øn tr√∫c ƒë·∫∑c bi·ªát
                    """,
                    'Neighborhood': """
                        **Khu v·ª±c (Neighborhood)** cho bi·∫øt v·ªã tr√≠ ƒë·ªãa l√Ω c·ªßa ng√¥i nh√†.

                        * L√† m·ªôt trong nh·ªØng y·∫øu t·ªë quan tr·ªçng nh·∫•t quy·∫øt ƒë·ªãnh gi√° nh√†
                        * Khu v·ª±c c√≥ tr∆∞·ªùng h·ªçc t·ªët, an to√†n, g·∫ßn c√°c ti·ªán √≠ch th∆∞·ªùng c√≥ gi√° cao h∆°n
                        * S·ª± kh√°c bi·ªát v·ªÅ gi√° gi·ªØa c√°c khu v·ª±c c√≥ th·ªÉ l√™n t·ªõi 200-300%
                        * Xu h∆∞·ªõng ph√°t tri·ªÉn c·ªßa khu v·ª±c c≈©ng ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° tr·ªã nh√†
                    """
                }

                st.markdown('<div class="info-box">', unsafe_allow_html=True)
                st.markdown(f"### Gi·∫£i th√≠ch ƒë·∫∑c tr∆∞ng: {selected_feature}")
                st.markdown(explanations.get(selected_feature, "Kh√¥ng c√≥ gi·∫£i th√≠ch chi ti·∫øt cho ƒë·∫∑c tr∆∞ng n√†y."))
                st.markdown('</div>', unsafe_allow_html=True)

    # Footer
    st.markdown("---")
    st.markdown("¬© 2025 ·ª®ng d·ª•ng D·ª± b√°o Gi√° Nh√† | Ph√°t tri·ªÉn b·ªüi LanMo")

if __name__ == "__main__":
    main()